<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.ayaan.vitalstracker&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.ayaan.vitalstracker&quot;&#10;        minSdk = 28&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.ksp)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.ayaan.vitalstracker&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.ayaan.vitalstracker&quot;&#10;        minSdk = 28&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Room dependencies&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // Koin dependencies&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;&#10;    // WorkManager&#10;    implementation(libs.androidx.work.runtime.ktx)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/data/dao/VitalsDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/data/dao/VitalsDao.kt" />
              <option name="updatedContent" value="package com.ayaan.vitalstracker.data.dao&#10;&#10;import androidx.room.Dao&#10;import androidx.room.Insert&#10;import androidx.room.Query&#10;import com.ayaan.vitalstracker.data.entity.Vitals&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface VitalsDao {&#10;    @Query(&quot;SELECT * FROM vitals ORDER BY timestamp DESC&quot;)&#10;    fun getAllVitals(): Flow&lt;List&lt;Vitals&gt;&gt;&#10;    &#10;    @Insert&#10;    suspend fun insertVitals(vitals: Vitals)&#10;    &#10;    @Query(&quot;SELECT * FROM vitals WHERE id = :id&quot;)&#10;    suspend fun getVitalsById(id: Long): Vitals?&#10;    &#10;    @Query(&quot;DELETE FROM vitals WHERE id = :id&quot;)&#10;    suspend fun deleteVitals(id: Long)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/data/entity/Vitals.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/data/entity/Vitals.kt" />
              <option name="updatedContent" value="package com.ayaan.vitalstracker.data.entity&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import java.util.Date&#10;&#10;@Entity(tableName = &quot;vitals&quot;)&#10;data class Vitals(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val systolicPressure: Int,&#10;    val diastolicPressure: Int,&#10;    val heartRate: Int,&#10;    val weight: Float,&#10;    val babyKicksCount: Int,&#10;    val timestamp: Date = Date()&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/data/repository/VitalsRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/data/repository/VitalsRepository.kt" />
              <option name="updatedContent" value="package com.ayaan.vitalstracker.data.repository&#10;&#10;import com.ayaan.vitalstracker.data.dao.VitalsDao&#10;import com.ayaan.vitalstracker.data.entity.Vitals&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class VitalsRepository(private val vitalsDao: VitalsDao) {&#10;    &#10;    fun getAllVitals(): Flow&lt;List&lt;Vitals&gt;&gt; = vitalsDao.getAllVitals()&#10;    &#10;    suspend fun insertVitals(vitals: Vitals) = vitalsDao.insertVitals(vitals)&#10;    &#10;    suspend fun getVitalsById(id: Long): Vitals? = vitalsDao.getVitalsById(id)&#10;    &#10;    suspend fun deleteVitals(id: Long) = vitalsDao.deleteVitals(id)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/ui/AddVitalsDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/ui/AddVitalsDialog.kt" />
              <option name="updatedContent" value="package com.ayaan.vitalstracker.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddVitalsDialog(&#10;    onDismiss: () -&gt; Unit,&#10;    onSave: (Int, Int, Int, Float, Int) -&gt; Unit&#10;) {&#10;    var systolicPressure by remember { mutableStateOf(&quot;&quot;) }&#10;    var diastolicPressure by remember { mutableStateOf(&quot;&quot;) }&#10;    var heartRate by remember { mutableStateOf(&quot;&quot;) }&#10;    var weight by remember { mutableStateOf(&quot;&quot;) }&#10;    var babyKicks by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    var systolicError by remember { mutableStateOf(false) }&#10;    var diastolicError by remember { mutableStateOf(false) }&#10;    var heartRateError by remember { mutableStateOf(false) }&#10;    var weightError by remember { mutableStateOf(false) }&#10;    var babyKicksError by remember { mutableStateOf(false) }&#10;&#10;    Dialog(onDismissRequest = onDismiss) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Add Vitals&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    modifier = Modifier.align(Alignment.CenterHorizontally)&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = systolicPressure,&#10;                        onValueChange = { &#10;                            systolicPressure = it&#10;                            systolicError = false&#10;                        },&#10;                        label = { Text(&quot;Systolic&quot;) },&#10;                        placeholder = { Text(&quot;120&quot;) },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                        isError = systolicError,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                    &#10;                    OutlinedTextField(&#10;                        value = diastolicPressure,&#10;                        onValueChange = { &#10;                            diastolicPressure = it&#10;                            diastolicError = false&#10;                        },&#10;                        label = { Text(&quot;Diastolic&quot;) },&#10;                        placeholder = { Text(&quot;80&quot;) },&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                        isError = diastolicError,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;                &#10;                OutlinedTextField(&#10;                    value = heartRate,&#10;                    onValueChange = { &#10;                        heartRate = it&#10;                        heartRateError = false&#10;                    },&#10;                    label = { Text(&quot;Heart Rate (bpm)&quot;) },&#10;                    placeholder = { Text(&quot;72&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                    isError = heartRateError,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = weight,&#10;                    onValueChange = { &#10;                        weight = it&#10;                        weightError = false&#10;                    },&#10;                    label = { Text(&quot;Weight (kg)&quot;) },&#10;                    placeholder = { Text(&quot;65.5&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    isError = weightError,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = babyKicks,&#10;                    onValueChange = { &#10;                        babyKicks = it&#10;                        babyKicksError = false&#10;                    },&#10;                    label = { Text(&quot;Baby Kicks Count&quot;) },&#10;                    placeholder = { Text(&quot;10&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                    isError = babyKicksError,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.End&#10;                ) {&#10;                    TextButton(onClick = onDismiss) {&#10;                        Text(&quot;Cancel&quot;)&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    &#10;                    Button(&#10;                        onClick = {&#10;                            // Validate inputs&#10;                            val systolic = systolicPressure.toIntOrNull()&#10;                            val diastolic = diastolicPressure.toIntOrNull()&#10;                            val hr = heartRate.toIntOrNull()&#10;                            val wt = weight.toFloatOrNull()&#10;                            val kicks = babyKicks.toIntOrNull()&#10;                            &#10;                            systolicError = systolic == null || systolic &lt;= 0&#10;                            diastolicError = diastolic == null || diastolic &lt;= 0&#10;                            heartRateError = hr == null || hr &lt;= 0&#10;                            weightError = wt == null || wt &lt;= 0&#10;                            babyKicksError = kicks == null || kicks &lt; 0&#10;                            &#10;                            if (!systolicError &amp;&amp; !diastolicError &amp;&amp; !heartRateError &amp;&amp; !weightError &amp;&amp; !babyKicksError) {&#10;                                onSave(systolic!!, diastolic!!, hr!!, wt!!, kicks!!)&#10;                                onDismiss()&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Save&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/ui/MainScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/ui/MainScreen.kt" />
              <option name="originalContent" value="package com.ayaan.vitalstracker.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.ayaan.vitalstracker.data.entity.Vitals&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScreen(&#10;    vitals: List&lt;Vitals&gt;,&#10;    isLoading: Boolean,&#10;    onAddVitals: (Int, Int, Int, Float, Int) -&gt; Unit&#10;) {&#10;    var showDialog by remember { mutableStateOf(false) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Pregnancy Vitals Tracker&quot;) }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showDialog = true },&#10;                containerColor = MaterialTheme.colorScheme.primary&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Vitals&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;            } else if (vitals.isEmpty()) {&#10;                Column(&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No vitals recorded yet&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Tap + to add your first entry&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(vitals) { vital -&gt;&#10;                        VitalsCard(vital = vital)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDialog) {&#10;        AddVitalsDialog(&#10;            onDismiss = { showDialog = false },&#10;            onSave = { systolic, diastolic, heartRate, weight, babyKicks -&gt;&#10;                onAddVitals(systolic, diastolic, heartRate, weight, babyKicks)&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VitalsCard(vital: Vitals) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = formatDate(vital.timestamp),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = formatTime(vital.timestamp),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                VitalItem(&#10;                    label = &quot;Blood Pressure&quot;,&#10;                    value = &quot;${vital.systolicPressure}/${vital.diastolicPressure}&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                VitalItem(&#10;                    label = &quot;Heart Rate&quot;,&#10;                    value = &quot;${vital.heartRate} bpm&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                VitalItem(&#10;                    label = &quot;Weight&quot;,&#10;                    value = &quot;${vital.weight} kg&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                VitalItem(&#10;                    label = &quot;Baby Kicks&quot;,&#10;                    value = &quot;${vital.babyKicksCount}&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VitalItem(&#10;    label: String,&#10;    value: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(date: Date): String {&#10;    val formatter = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    return formatter.format(date)&#10;}&#10;&#10;private fun formatTime(date: Date): String {&#10;    val formatter = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;    return formatter.format(date)&#10;}&#10;" />
              <option name="updatedContent" value="package com.ayaan.vitalstracker.ui&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.Notifications&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.ayaan.vitalstracker.VitalsTrackerApplication&#10;import com.ayaan.vitalstracker.data.entity.Vitals&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MainScreen(&#10;    vitals: List&lt;Vitals&gt;,&#10;    isLoading: Boolean,&#10;    onAddVitals: (Int, Int, Int, Float, Int) -&gt; Unit&#10;) {&#10;    var showDialog by remember { mutableStateOf(false) }&#10;    val context = LocalContext.current&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Pregnancy Vitals Tracker&quot;) },&#10;                actions = {&#10;                    // Test notification button&#10;                    IconButton(&#10;                        onClick = {&#10;                            (context.applicationContext as VitalsTrackerApplication)&#10;                                .triggerImmediateNotification()&#10;                        }&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Notifications,&#10;                            contentDescription = &quot;Test Notification&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = { showDialog = true },&#10;                containerColor = MaterialTheme.colorScheme.primary&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add Vitals&quot;)&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            if (isLoading) {&#10;                CircularProgressIndicator(&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;            } else if (vitals.isEmpty()) {&#10;                Column(&#10;                    modifier = Modifier.align(Alignment.Center),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No vitals recorded yet&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Tap + to add your first entry&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentPadding = PaddingValues(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(vitals) { vital -&gt;&#10;                        VitalsCard(vital = vital)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDialog) {&#10;        AddVitalsDialog(&#10;            onDismiss = { showDialog = false },&#10;            onSave = { systolic, diastolic, heartRate, weight, babyKicks -&gt;&#10;                onAddVitals(systolic, diastolic, heartRate, weight, babyKicks)&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VitalsCard(vital: Vitals) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = formatDate(vital.timestamp),&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = formatTime(vital.timestamp),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                VitalItem(&#10;                    label = &quot;Blood Pressure&quot;,&#10;                    value = &quot;${vital.systolicPressure}/${vital.diastolicPressure}&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                VitalItem(&#10;                    label = &quot;Heart Rate&quot;,&#10;                    value = &quot;${vital.heartRate} bpm&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                VitalItem(&#10;                    label = &quot;Weight&quot;,&#10;                    value = &quot;${vital.weight} kg&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                VitalItem(&#10;                    label = &quot;Baby Kicks&quot;,&#10;                    value = &quot;${vital.babyKicksCount}&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun VitalItem(&#10;    label: String,&#10;    value: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;        Text(&#10;            text = value,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;private fun formatDate(date: Date): String {&#10;    val formatter = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    return formatter.format(date)&#10;}&#10;&#10;private fun formatTime(date: Date): String {&#10;    val formatter = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;    return formatter.format(date)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/viewmodel/VitalsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ayaan/vitalstracker/viewmodel/VitalsViewModel.kt" />
              <option name="updatedContent" value="package com.ayaan.vitalstracker.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.ayaan.vitalstracker.data.entity.Vitals&#10;import com.ayaan.vitalstracker.data.repository.VitalsRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class VitalsViewModel(private val repository: VitalsRepository) : ViewModel() {&#10;    &#10;    private val _vitals = MutableStateFlow&lt;List&lt;Vitals&gt;&gt;(emptyList())&#10;    val vitals: StateFlow&lt;List&lt;Vitals&gt;&gt; = _vitals.asStateFlow()&#10;    &#10;    private val _isLoading = MutableStateFlow(false)&#10;    val isLoading: StateFlow&lt;Boolean&gt; = _isLoading.asStateFlow()&#10;    &#10;    init {&#10;        loadVitals()&#10;    }&#10;    &#10;    private fun loadVitals() {&#10;        viewModelScope.launch {&#10;            repository.getAllVitals().collect { vitalsList -&gt;&#10;                _vitals.value = vitalsList&#10;            }&#10;        }&#10;    }&#10;    &#10;    fun insertVitals(&#10;        systolicPressure: Int,&#10;        diastolicPressure: Int,&#10;        heartRate: Int,&#10;        weight: Float,&#10;        babyKicksCount: Int&#10;    ) {&#10;        viewModelScope.launch {&#10;            _isLoading.value = true&#10;            try {&#10;                val vitals = Vitals(&#10;                    systolicPressure = systolicPressure,&#10;                    diastolicPressure = diastolicPressure,&#10;                    heartRate = heartRate,&#10;                    weight = weight,&#10;                    babyKicksCount = babyKicksCount&#10;                )&#10;                repository.insertVitals(vitals)&#10;            } finally {&#10;                _isLoading.value = false&#10;            }&#10;        }&#10;    }&#10;    &#10;    fun deleteVitals(id: Long) {&#10;        viewModelScope.launch {&#10;            repository.deleteVitals(id)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>